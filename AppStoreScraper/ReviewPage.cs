// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("feed")]
        public Feed Feed { get; set; }
    }

    public partial class Feed
    {
        [JsonProperty("author")]
        public FeedAuthor Author { get; set; }

        [JsonProperty("entry")]
        public Entry[] Entry { get; set; }

        [JsonProperty("updated")]
        public Icon Updated { get; set; }

        [JsonProperty("rights")]
        public Icon Rights { get; set; }

        [JsonProperty("title")]
        public Icon Title { get; set; }

        [JsonProperty("icon")]
        public Icon Icon { get; set; }

        [JsonProperty("link")]
        public LinkElement[] Link { get; set; }

        [JsonProperty("id")]
        public Icon Id { get; set; }
    }

    public partial class FeedAuthor
    {
        [JsonProperty("name")]
        public Icon Name { get; set; }

        [JsonProperty("uri")]
        public Icon Uri { get; set; }
    }

    public partial class Icon
    {
        [JsonProperty("label")]
        public string Label { get; set; }
    }

    public partial class Entry
    {
        [JsonProperty("author")]
        public EntryAuthor Author { get; set; }

        [JsonProperty("im:version")]
        public Icon ImVersion { get; set; }

        [JsonProperty("im:rating")]
        public Icon ImRating { get; set; }

        [JsonProperty("id")]
        public Icon Id { get; set; }

        [JsonProperty("title")]
        public Icon Title { get; set; }

        [JsonProperty("content")]
        public Content Content { get; set; }

        [JsonProperty("link")]
        public EntryLink Link { get; set; }

        [JsonProperty("im:voteSum")]
        public Icon ImVoteSum { get; set; }

        [JsonProperty("im:contentType")]
        public ImContentType ImContentType { get; set; }

        [JsonProperty("im:voteCount")]
        public Icon ImVoteCount { get; set; }
    }

    public partial class EntryAuthor
    {
        [JsonProperty("uri")]
        public Icon Uri { get; set; }

        [JsonProperty("name")]
        public Icon Name { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }
    }

    public partial class Content
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("attributes")]
        public ContentAttributes Attributes { get; set; }
    }

    public partial class ContentAttributes
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class ImContentType
    {
        [JsonProperty("attributes")]
        public ImContentTypeAttributes Attributes { get; set; }
    }

    public partial class ImContentTypeAttributes
    {
        [JsonProperty("term")]
        public Label Term { get; set; }

        [JsonProperty("label")]
        public Label Label { get; set; }
    }

    public partial class EntryLink
    {
        [JsonProperty("attributes")]
        public PurpleAttributes Attributes { get; set; }
    }

    public partial class PurpleAttributes
    {
        [JsonProperty("rel")]
        public Rel Rel { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public partial class LinkElement
    {
        [JsonProperty("attributes")]
        public FluffyAttributes Attributes { get; set; }
    }

    public partial class FluffyAttributes
    {
        [JsonProperty("rel")]
        public string Rel { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public enum TypeEnum { Text };

    public enum Label { Application };

    public enum Rel { Related };

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                LabelConverter.Singleton,
                RelConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "text")
            {
                return TypeEnum.Text;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Text)
            {
                serializer.Serialize(writer, "text");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class LabelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Label) || t == typeof(Label?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Application")
            {
                return Label.Application;
            }
            throw new Exception("Cannot unmarshal type Label");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Label)untypedValue;
            if (value == Label.Application)
            {
                serializer.Serialize(writer, "Application");
                return;
            }
            throw new Exception("Cannot marshal type Label");
        }

        public static readonly LabelConverter Singleton = new LabelConverter();
    }

    internal class RelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rel) || t == typeof(Rel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "related")
            {
                return Rel.Related;
            }
            throw new Exception("Cannot unmarshal type Rel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rel)untypedValue;
            if (value == Rel.Related)
            {
                serializer.Serialize(writer, "related");
                return;
            }
            throw new Exception("Cannot marshal type Rel");
        }

        public static readonly RelConverter Singleton = new RelConverter();
    }
}
